buildscript {
	repositories {
		mavenCentral()
		jcenter()
        google()
        maven {
            name 'OpenMods Third Party'
            url 'https://repo.openmods.info/artifactory/simple/thirdparty'
        }
	}
	dependencies {
        classpath group: 'net.thesilkminer.gradle.translationchecker', name: 'TranslationChecker', version: '1.1'
        classpath group: 'com.autoscout24.gradle', name: 'gradle-todo-plugin', version: '1.0'
        classpath group: 'org.jetbrains.kotlin', name: 'kotlin-gradle-plugin', version: "${kotlin_version}"
    }
}

plugins {
	id 'java'
	id 'idea'
    id 'eclipse'
	id 'visual-studio'
	id 'checkstyle'
	id 'maven'
    id 'com.github.johnrengelman.shadow' version '2.0.4'
    id 'com.github.ben-manes.versions' version '0.15.0'
    id 'com.github.hierynomus.license' version '0.14.0'
    id 'org.jetbrains.dokka' version '0.9.17'
}

apply plugin: 'findbugs'
apply plugin: 'kotlin'
apply plugin: 'com.autoscout24.gradle.todo'

idea {
    module {
        inheritOutputDirs = true
    }
}

license {
    header file('COPYING')
    include '**/*.java'
    include '**/*.kt'
    ext.year = Calendar.getInstance().get(Calendar.YEAR)
    ext.name = 'TheSilkMiner'
    ext.email = 'thesilkminer <at> outlook <dot> com'
    ext.app = 'SKL Interpreter for Java'

    strictCheck true
    ignoreFailures false

    mapping {
        java = 'SLASHSTAR_STYLE'
        kt = 'SLASHSTAR_STYLE'
    }
}

todo {
    todoPattern = '\\/(\\/|\\*)(( )|())[\\\\t\\\\s]*(TODO|FIXME)(.*)'
}

findbugs {
    ignoreFailures = true
}

checkstyle {
    toolVersion = '8.2'
    configFile = new File(new File(rootDir, 'etc'), 'checkstyle.xml')
}

dokka {
    outputFormat = 'gfm'
    outputDirectory = "$buildDir/kdoc/md"
    jdkVersion = 8
    skipEmptyPackages = false
}

compileKotlin {
    kotlinOptions.jvmTarget = '1.8'
}

tasks.withType(FindBugs) {
    reports {
        xml.enabled = false
        
        html.enabled = true
        html.stylesheet project.resources.text.fromFile('etc/findbugs.xsl')
        html.destination rootProject.file('build/reports/findbugs.html')
    }
}

tasks.withType(Checkstyle) {
    reports {
        xml.enabled = true
        xml.destination rootProject.file('build/reports/checkstyle.xml')
        
        html.enabled = true
        html.stylesheet project.resources.text.fromFile('etc/checkstyle.xsl')
        html.destination rootProject.file('build/reports/checkstyle.html')
    }
}

sourceCompatibility = 1.8
targetCompatibility = 1.8

group "net.thesilkminer.skl.interpreter"
version app_version
archivesBaseName = "${archives_name}"

repositories {
	mavenCentral()
	jcenter()
    google()
}

configurations {
    shade
    compile.extendsFrom shade
}

dependencies {
	// Apache Commons-Lang 3
	shade group: 'org.apache.commons', name: 'commons-lang3', version: '3.4'
    
    // Apache Commons IO
    shade group: 'commons-io', name: 'commons-io', version: '2.6'

	// Guava: Google Core Libraries For Java
	shade group: 'com.google.guava', name: 'guava', version: '12.0'
    
    // FindBugs Annotations
    shade group: 'com.google.code.findbugs', name: 'annotations', version: '3.0.1'
    
    // FindBugs JSR305
    shade group: 'com.google.code.findbugs', name: 'jsr305', version: '3.0.2'
    
    // Jetbrains Annotations
	shade group: 'org.jetbrains', name: 'annotations', version: '15.0'
    
    // jOOÎ»
    shade group: 'org.jooq', name: 'jool-java-8', version: '0.9.13'
    
    // jOOR
    shade group: 'org.jooq', name: 'joor-java-8', version: '0.9.7'
    
    // jOOU
    shade group: 'org.jooq', name: 'joou-java-6', version: '0.9.3'
    
    // Kotlin Standard Lib
    compile group: 'org.jetbrains.kotlin', name: 'kotlin-stdlib', version: "${kotlin_version}"
    
    // SilkCommons Core
    /* TO ADD LATER, WHEN IT IS AVAILABLE */

    // SilkCommons IO
    /* TO ADD LATER, WHEN IT IS AVAILABLE */
    
    // SLF4J Api Module
    shade group: 'org.slf4j', name: 'slf4j-api', version: '1.8.0-alpha2'
	
    // ======== RUNTIME ONLY DEPENDENCIES ======== //
    
    // Apache Log4j
    runtime group: 'log4j', name: 'log4j', version: '1.2.17'
    
    // SLF4J Log4j 12 Binding
    runtime group: 'org.slf4j', name: 'slf4j-log4j12', version: '1.8.0-alpha2'
    
    // ======== TEST ONLY DEPENDENCIES ======== //
    
	// JUnit
	testCompile group: 'junit', name: 'junit', version: '4.12'
    
    // Kotlin JUnit
    testCompile group: 'org.jetbrains.kotlin', name: 'kotlin-test-junit', version: "${kotlin_version}"
}

ext.jarManifest = manifest {
    attributes("Archive-Type": "jar")
}

ext.zipManifest = manifest {
    attributes("Archive-Type": "zip")
}

ext.authorsManifest = manifest {
    attributes("Author": "TheSilkMiner")
}

ext.runnableManifest = manifest {
    attributes("Main-Class": "java.lang.RuntimeException")
}

ext.fatJarManifest = manifest {
    attributes("Is-Fat": "true")
}

ext.thinJarManifest = manifest {
    attributes("Is-Fat": "false")
}

ext.genericJarManifest = manifest {
    from ext.jarManifest, ext.authorsManifest, ext.runnableManifest
}

jar {
    manifest {
        from project.genericJarManifest, project.thinJarManifest
    }
    exclude '**/log4j.xml'
    exclude 'org/apache/log4j/custom/**'
}

shadowJar {
    configurations = [ project.configurations.shade ]
    manifest {
        from project.genericJarManifest, project.fatJarManifest
    }
    exclude '**/log4j.xml'
    exclude 'org/apache/log4j/custom/**'
}

task apiJar(type: Jar) {
    baseName "${archives_name}-API"
    version "${api_version}"

    from sourceSets.main.output

    include 'net/thesilkminer/skl/interpreter/skd/api/**'

    classifier = 'api'
}

task apiSrcJar(type: Jar) {
    baseName "${archives_name}-API"
    version "${api_version}"

    from sourceSets.main.allSource

    include 'net/thesilkminer/skl/interpreter/skd/api/**'

    classifier = 'sources'
}

task sourcesJar(type: Jar, dependsOn: classes) {
    classifier = 'sources'
    from sourceSets.main.allSource
    manifest {
        from project.thinJarManifest, project.authorsManifest, project.jarManifest
    }
}

task dokkaJavadoc(type: org.jetbrains.dokka.gradle.DokkaTask) {
    outputFormat = 'javadoc'
    outputDirectory = "$buildDir/kdoc/javadoc"
    jdkVersion = 8
    reportUndocumented = false
    skipEmptyPackages = false
}

build.dependsOn shadowJar
check.dependsOn licenseMain
check.dependsOn checkTodo
build.dependsOn check
build.dependsOn dokka
dokka.dependsOn dokkaJavadoc

artifacts {
    archives sourcesJar
    archives shadowJar
    archives apiJar
    archives apiSrcJar
}

wrapper {
	gradleVersion = "${gradle_version}"
    distributionType = Wrapper.DistributionType.ALL
}
